Return-Path: <linux-erofs-bounces+lists+linux-erofs=lfdr.de@lists.ozlabs.org>
X-Original-To: lists+linux-erofs@lfdr.de
Delivered-To: lists+linux-erofs@lfdr.de
Received: from lists.ozlabs.org (lists.ozlabs.org [IPv6:2404:9400:2:0:216:3eff:fee1:b9f1])
	by mail.lfdr.de (Postfix) with ESMTPS id 3400246F82A
	for <lists+linux-erofs@lfdr.de>; Fri, 10 Dec 2021 01:49:02 +0100 (CET)
Received: from boromir.ozlabs.org (localhost [IPv6:::1])
	by lists.ozlabs.org (Postfix) with ESMTP id 4J9C2h0VBhz3bmr
	for <lists+linux-erofs@lfdr.de>; Fri, 10 Dec 2021 11:49:00 +1100 (AEDT)
Authentication-Results: lists.ozlabs.org;
	dkim=fail reason="signature verification failed" (2048-bit key; unprotected) header.d=gmail.com header.i=@gmail.com header.a=rsa-sha256 header.s=20210112 header.b=R/brVT3G;
	dkim-atps=neutral
X-Original-To: linux-erofs@lists.ozlabs.org
Delivered-To: linux-erofs@lists.ozlabs.org
Authentication-Results: lists.ozlabs.org; spf=pass (sender SPF authorized)
 smtp.mailfrom=gmail.com (client-ip=2607:f8b0:4864:20::d2f;
 helo=mail-io1-xd2f.google.com; envelope-from=igoreisberg@gmail.com;
 receiver=<UNKNOWN>)
Authentication-Results: lists.ozlabs.org; dkim=pass (2048-bit key;
 unprotected) header.d=gmail.com header.i=@gmail.com header.a=rsa-sha256
 header.s=20210112 header.b=R/brVT3G; dkim-atps=neutral
Received: from mail-io1-xd2f.google.com (mail-io1-xd2f.google.com
 [IPv6:2607:f8b0:4864:20::d2f])
 (using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
 key-exchange X25519 server-signature RSA-PSS (2048 bits) server-digest SHA256)
 (No client certificate requested)
 by lists.ozlabs.org (Postfix) with ESMTPS id 4J9C2X4Vr0z2xtj
 for <linux-erofs@lists.ozlabs.org>; Fri, 10 Dec 2021 11:48:50 +1100 (AEDT)
Received: by mail-io1-xd2f.google.com with SMTP id x6so8638055iol.13
 for <linux-erofs@lists.ozlabs.org>; Thu, 09 Dec 2021 16:48:50 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20210112;
 h=mime-version:from:date:message-id:subject:to;
 bh=vY19b0kJcvNqMt2LG5KOl7AWpDO1O6gOD2CNr10bOmI=;
 b=R/brVT3G8ndtxdjGxpV8gw9ZOFni9CjzDugmSKlS5Mv0p4qnozAYV0ZBbUT9NaOibb
 +g7TaKJMEq5OJvzX88tUfBZXjM0uo6Qk9LYaQ6EdQ5zQgvwJIye3Vi7zjSabSCTzTgLr
 4iysZn6nowYebKr4cOMA+J5nkngCkCKRJbocS6NF4XBmKFTRDYBg3FQjb15e0IlivT83
 +nrkOuyu78Vx3o+BkoNUxBLsUAJfp+By82OeKtJl9UXBIWBUDDG6Jy0kXUAiW58aS9F6
 P7vkQdug32+1e1A/djJJwYMyznkU1Yc1XK0boFcVJFfqicrC+stkKOyoB1zuQTF19CSU
 FZew==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20210112;
 h=x-gm-message-state:mime-version:from:date:message-id:subject:to;
 bh=vY19b0kJcvNqMt2LG5KOl7AWpDO1O6gOD2CNr10bOmI=;
 b=vN9rUUTIuWGa4kfvCSJLjaL2ucpPc6f4pyDBtyX83LgRGpkDhH1Uk8G2yfwDZDy8QY
 TyMplx4fx9QbiGM0MGW+PGWUariSeO0gc+HtGlZ8P6ouR6Paz0RtgZcvKpI4d/yD0trD
 3fh6qSLK/1Th8hj9jsrx+s3uuZRbh7ykaAF/kzsrlq+TSPMnbZ2bFiV4VWVznH6J2Mmn
 FzeUy+NydJFULURzNwqj++MQwqk9ByWO60dWyZBakzf8lhjwwhCkgBEU0wYCQGnx6wBi
 loTtAtd7X/08gQKrYYApgoOT4QjF83k/Dlx1OWuIOOX9Z7lVUtqHQXobe2mcRehRVnOr
 kgZg==
X-Gm-Message-State: AOAM5305GdiQ41Fs+RqjSlAkYwN5XD4AW+whu/dnGAWtYMaXOuQO0Rgw
 ROu3L9w5qF6aAmYrC3GoN7dGBX2a9rqTWCgPc6fynbEiLrw=
X-Google-Smtp-Source: ABdhPJy8Vmk6wyytqFq/xCHSE87qDnnw6QXeMJTvn7UJ+If/QnHlmWs6XRAWGsY3dzwlGekLhETbRfDJOZipqediiDg=
X-Received: by 2002:a6b:b2c1:: with SMTP id b184mr18480809iof.24.1639097321521; 
 Thu, 09 Dec 2021 16:48:41 -0800 (PST)
MIME-Version: 1.0
From: Igor Eisberg <igoreisberg@gmail.com>
Date: Fri, 10 Dec 2021 02:48:30 +0200
Message-ID: <CABjEcnFhyAq9COGQAj4zCA7dydE9_o0b9s99ubEmgowBB3kCHQ@mail.gmail.com>
Subject: fsck.erofs: support --extract=X like fsck.cramfs to extract to path X
To: linux-erofs@lists.ozlabs.org
Content-Type: multipart/mixed; boundary="0000000000009a22ec05d2c01507"
X-BeenThere: linux-erofs@lists.ozlabs.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: Development of Linux EROFS file system <linux-erofs.lists.ozlabs.org>
List-Unsubscribe: <https://lists.ozlabs.org/options/linux-erofs>,
 <mailto:linux-erofs-request@lists.ozlabs.org?subject=unsubscribe>
List-Archive: <http://lists.ozlabs.org/pipermail/linux-erofs/>
List-Post: <mailto:linux-erofs@lists.ozlabs.org>
List-Help: <mailto:linux-erofs-request@lists.ozlabs.org?subject=help>
List-Subscribe: <https://lists.ozlabs.org/listinfo/linux-erofs>,
 <mailto:linux-erofs-request@lists.ozlabs.org?subject=subscribe>
Errors-To: linux-erofs-bounces+lists+linux-erofs=lfdr.de@lists.ozlabs.org
Sender: "Linux-erofs"
 <linux-erofs-bounces+lists+linux-erofs=lfdr.de@lists.ozlabs.org>

--0000000000009a22ec05d2c01507
Content-Type: multipart/alternative; boundary="0000000000009a22ea05d2c01505"

--0000000000009a22ea05d2c01505
Content-Type: text/plain; charset="UTF-8"

* Extracts dirs, regular files and symlinks (overwrite enabled with a
erofs_warn, mainly for use with WSL, in case certain files in img exist in
different letter cases under the same dir, i.e. "path/to/file/alarm" and
"path/to/file/Alarm").
* Raw and compressed data chunks are handled with a unified function to
avoid repeats, compressed data is verified lineary
(with EROFS_GET_BLOCKS_FIEMAP) instead of lookback, as it's problematic to
extract data when looping backwards.
* Also refactored some function names and strings for consistency.

Please let me know if anything has to be changed.

Best regards to Mr. Xiang!

--0000000000009a22ea05d2c01505
Content-Type: text/html; charset="UTF-8"
Content-Transfer-Encoding: quoted-printable

<div dir=3D"ltr"><div dir=3D"ltr"><div>* Extracts dirs, regular files and s=
ymlinks (overwrite enabled with a erofs_warn, mainly for use with WSL, in c=
ase certain files in img exist in different letter=C2=A0cases under the sam=
e dir, i.e. &quot;path/to/file/alarm&quot; and &quot;path/to/file/Alarm&quo=
t;).</div><div>* Raw and compressed data chunks are handled with a unified =
function to avoid repeats, compressed data is verified lineary (with=C2=A0E=
ROFS_GET_BLOCKS_FIEMAP) instead of lookback, as it&#39;s problematic to ext=
ract data when looping backwards.</div><div>* Also refactored some function=
 names and strings for consistency.</div><div><br></div><div>Please let me =
know if anything has to be changed.</div><div><br></div>Best regards to Mr.=
 Xiang!</div></div>

--0000000000009a22ea05d2c01505--

--0000000000009a22ec05d2c01507
Content-Type: application/octet-stream; name="erofs-utils-fsck.patch"
Content-Disposition: attachment; filename="erofs-utils-fsck.patch"
Content-Transfer-Encoding: base64
Content-ID: <f_kwzo02q00>
X-Attachment-Id: f_kwzo02q00

ZGlmZiAtTmF1ciBhL2R1bXAvbWFpbi5jIGIvZHVtcC9tYWluLmMKLS0tIGEvZHVtcC9tYWluLmMJ
MjAyMS0xMi0wOCAwMzoyNjo1MC4wMDAwMDAwMDAgKzAyMDAKKysrIGIvZHVtcC9tYWluLmMJMjAy
MS0xMi0xMCAwMDo1Nzo1OS45ODMzMTc2MDAgKzAyMDAKQEAgLTkxLDcgKzkxLDcgQEAKIH07CiAK
IHN0YXRpYyBpbnQgZXJvZnNfcmVhZF9kaXIoZXJvZnNfbmlkX3QgbmlkLCBlcm9mc19uaWRfdCBw
YXJlbnRfbmlkKTsKLXN0YXRpYyBpbmxpbmUgaW50IGVyb2ZzX2NoZWNrZGlyZW50KHN0cnVjdCBl
cm9mc19kaXJlbnQgKmRlLAorc3RhdGljIGlubGluZSBpbnQgZXJvZnNfY2hlY2tfZGlyZW50KHN0
cnVjdCBlcm9mc19kaXJlbnQgKmRlLAogCQlzdHJ1Y3QgZXJvZnNfZGlyZW50ICpsYXN0X2RlLAog
CQl1MzIgbWF4c2l6ZSwgY29uc3QgY2hhciAqZG5hbWUpOwogCkBAIC0xMDAsMTMgKzEwMCwxMyBA
QAogCWZwdXRzKCJ1c2FnZTogW29wdGlvbnNdIElNQUdFXG5cbiIKIAkgICAgICAiRHVtcCBlcm9m
cyBsYXlvdXQgZnJvbSBJTUFHRSwgYW5kIFtvcHRpb25zXSBhcmU6XG4iCiAJICAgICAgIiAtUyAg
ICAgICAgICAgICAgc2hvdyBzdGF0aXN0aWMgaW5mb3JtYXRpb24gb2YgdGhlIGltYWdlXG4iCi0J
ICAgICAgIiAtViAgICAgICAgICAgICAgcHJpbnQgdGhlIHZlcnNpb24gbnVtYmVyIG9mIGR1bXAu
ZXJvZnMgYW5kIGV4aXQuXG4iCisJICAgICAgIiAtViAgICAgICAgICAgICAgcHJpbnQgdGhlIHZl
cnNpb24gbnVtYmVyIG9mIGR1bXAuZXJvZnMgYW5kIGV4aXRcbiIKIAkgICAgICAiIC1lICAgICAg
ICAgICAgICBzaG93IGV4dGVudCBpbmZvICgtLW5pZCBpcyByZXF1aXJlZClcbiIKIAkgICAgICAi
IC1zICAgICAgICAgICAgICBzaG93IGluZm9ybWF0aW9uIGFib3V0IHN1cGVyYmxvY2tcbiIKIAkg
ICAgICAiIC0tZGV2aWNlPVggICAgICBzcGVjaWZ5IGFuIGV4dHJhIGRldmljZSB0byBiZSB1c2Vk
IHRvZ2V0aGVyXG4iCiAJICAgICAgIiAtLW5pZD0jICAgICAgICAgc2hvdyB0aGUgdGFyZ2V0IGlu
b2RlIGluZm8gb2YgbmlkICNcbiIKIAkgICAgICAiIC0tcGF0aD1YICAgICAgICBzaG93IHRoZSB0
YXJnZXQgaW5vZGUgaW5mbyBvZiBwYXRoIFhcbiIKLQkgICAgICAiIC0taGVscCAgICAgICAgICBk
aXNwbGF5IHRoaXMgaGVscCBhbmQgZXhpdC5cbiIsCisJICAgICAgIiAtLWhlbHAgICAgICAgICAg
ZGlzcGxheSB0aGlzIGhlbHAgYW5kIGV4aXRcbiIsCiAJICAgICAgc3RkZXJyKTsKIH0KIApAQCAt
MjQ0LDcgKzI0NCw3IEBACiAJCXN0YXRzLmZpbGVfY29tcF9zaXplW29jY3VwaWVkX3NpemVfbWFy
a10rKzsKIH0KIAotc3RhdGljIGlubGluZSBpbnQgZXJvZnNfY2hlY2tkaXJlbnQoc3RydWN0IGVy
b2ZzX2RpcmVudCAqZGUsCitzdGF0aWMgaW5saW5lIGludCBlcm9mc19jaGVja19kaXJlbnQoc3Ry
dWN0IGVyb2ZzX2RpcmVudCAqZGUsCiAJCXN0cnVjdCBlcm9mc19kaXJlbnQgKmxhc3RfZGUsCiAJ
CXUzMiBtYXhzaXplLCBjb25zdCBjaGFyICpkbmFtZSkKIHsKQEAgLTM1Myw3ICszNTMsNyBAQAog
CQkJfQogCiAJCQlkbmFtZSA9IChjaGFyICopYnVmICsgbmFtZW9mZjsKLQkJCXJldCA9IGVyb2Zz
X2NoZWNrZGlyZW50KGRlLCBlbmQsIG1heHNpemUsIGRuYW1lKTsKKwkJCXJldCA9IGVyb2ZzX2No
ZWNrX2RpcmVudChkZSwgZW5kLCBtYXhzaXplLCBkbmFtZSk7CiAJCQlpZiAocmV0IDwgMCkKIAkJ
CQlyZXR1cm4gcmV0OwogCQkJcmV0ID0gZXJvZnNfcmVhZF9kaXJlbnQoZGUsIG5pZCwgcGFyZW50
X25pZCwgZG5hbWUpOwpAQCAtNDA0LDcgKzQwNCw3IEBACiAKIAkJCW5hbWVvZmYgPSBsZTE2X3Rv
X2NwdShkZS0+bmFtZW9mZik7CiAJCQlkbmFtZSA9IChjaGFyICopYnVmICsgbmFtZW9mZjsKLQkJ
CWxlbiA9IGVyb2ZzX2NoZWNrZGlyZW50KGRlLCBlbmQsIG1heHNpemUsIGRuYW1lKTsKKwkJCWxl
biA9IGVyb2ZzX2NoZWNrX2RpcmVudChkZSwgZW5kLCBtYXhzaXplLCBkbmFtZSk7CiAJCQlpZiAo
bGVuIDwgMCkKIAkJCQlyZXR1cm4gbGVuOwogCkBAIC00NTgsMTkgKzQ1OCwxNCBAQAogCQkubV9s
YSA9IDAsCiAJfTsKIAotCWlmIChkdW1wY2ZnLmlub2RlX3BhdGgpIHsKKwlpZiAoZHVtcGNmZy5p
bm9kZV9wYXRoKQogCQllcnIgPSBlcm9mc19pbG9va3VwKGR1bXBjZmcuaW5vZGVfcGF0aCwgJmlu
b2RlKTsKLQkJaWYgKGVycikgewotCQkJZXJvZnNfZXJyKCJyZWFkIGlub2RlIGZhaWxlZCBAICVz
IiwgZHVtcGNmZy5pbm9kZV9wYXRoKTsKLQkJCXJldHVybjsKLQkJfQotCX0gZWxzZSB7CisJZWxz
ZQogCQllcnIgPSBlcm9mc19yZWFkX2lub2RlX2Zyb21fZGlzaygmaW5vZGUpOwotCQlpZiAoZXJy
KSB7Ci0JCQllcm9mc19lcnIoInJlYWQgaW5vZGUgZmFpbGVkIEAgbmlkICVsbHUiLAotCQkJCSAg
aW5vZGUubmlkIHwgMFVMTCk7Ci0JCQlyZXR1cm47Ci0JCX0KKworCWlmIChlcnIpIHsKKwkJZXJv
ZnNfZXJyKCJyZWFkIGlub2RlIGZhaWxlZCBAIG5pZCAlbGx1IiwgaW5vZGUubmlkIHwgMFVMTCk7
CisJCXJldHVybjsKIAl9CiAKIAllcnIgPSBlcm9mc19nZXRfb2NjdXBpZWRfc2l6ZSgmaW5vZGUs
ICZzaXplKTsKZGlmZiAtTmF1ciBhL2ZzY2svbWFpbi5jIGIvZnNjay9tYWluLmMKLS0tIGEvZnNj
ay9tYWluLmMJMjAyMS0xMi0wOCAwMzoyNjo1MC4wMDAwMDAwMDAgKzAyMDAKKysrIGIvZnNjay9t
YWluLmMJMjAyMS0xMi0xMCAwMjowNzozMi45MDE4MTcyMDAgKzAyMDAKQEAgLTYsNiArNiw4IEBA
CiAjaW5jbHVkZSA8c3RkbGliLmg+CiAjaW5jbHVkZSA8Z2V0b3B0Lmg+CiAjaW5jbHVkZSA8dGlt
ZS5oPgorI2luY2x1ZGUgPHV0aW1lLmg+CisjaW5jbHVkZSA8dW5pc3RkLmg+CiAjaW5jbHVkZSA8
c3lzL3N0YXQuaD4KICNpbmNsdWRlICJlcm9mcy9wcmludC5oIgogI2luY2x1ZGUgImVyb2ZzL2lv
LmgiCkBAIC0xNyw2ICsxOSw5IEBACiAJYm9vbCBjb3JydXB0ZWQ7CiAJYm9vbCBwcmludF9jb21w
X3JhdGlvOwogCWJvb2wgY2hlY2tfZGVjb21wOworCWNoYXIgKmV4dHJhY3RfZGlyOworCWludCBl
eHRyYWN0X2Rpcl9sZW47CisJYm9vbCBwcmVzZXJ2ZTsKIAl1NjQgcGh5c2ljYWxfYmxvY2tzOwog
CXU2NCBsb2dpY2FsX2Jsb2NrczsKIH07CkBAIC0yNCw4ICsyOSw5IEBACiAKIHN0YXRpYyBzdHJ1
Y3Qgb3B0aW9uIGxvbmdfb3B0aW9uc1tdID0gewogCXsiaGVscCIsIG5vX2FyZ3VtZW50LCAwLCAx
fSwKLQl7ImV4dHJhY3QiLCBub19hcmd1bWVudCwgMCwgMn0sCi0JeyJkZXZpY2UiLCByZXF1aXJl
ZF9hcmd1bWVudCwgMCwgM30sCisJeyJleHRyYWN0Iiwgb3B0aW9uYWxfYXJndW1lbnQsIDAsIDJ9
LAorCXsicHJlc2VydmUiLCBub19hcmd1bWVudCwgMCwgM30sCisJeyJkZXZpY2UiLCByZXF1aXJl
ZF9hcmd1bWVudCwgMCwgNH0sCiAJezAsIDAsIDAsIDB9LAogfTsKIApAQCAtMzMsMTIgKzM5LDEz
IEBACiB7CiAJZnB1dHMoInVzYWdlOiBbb3B0aW9uc10gSU1BR0VcblxuIgogCSAgICAgICJDaGVj
ayBlcm9mcyBmaWxlc3lzdGVtIGludGVncml0eSBvZiBJTUFHRSwgYW5kIFtvcHRpb25zXSBhcmU6
XG4iCi0JICAgICAgIiAtViAgICAgICAgICAgICAgcHJpbnQgdGhlIHZlcnNpb24gbnVtYmVyIG9m
IGZzY2suZXJvZnMgYW5kIGV4aXQuXG4iCisJICAgICAgIiAtViAgICAgICAgICAgICAgcHJpbnQg
dGhlIHZlcnNpb24gbnVtYmVyIG9mIGZzY2suZXJvZnMgYW5kIGV4aXRcbiIKIAkgICAgICAiIC1k
IyAgICAgICAgICAgICBzZXQgb3V0cHV0IG1lc3NhZ2UgbGV2ZWwgdG8gIyAobWF4aW11bSA5KVxu
IgogCSAgICAgICIgLXAgICAgICAgICAgICAgIHByaW50IHRvdGFsIGNvbXByZXNzaW9uIHJhdGlv
IG9mIGFsbCBmaWxlc1xuIgogCSAgICAgICIgLS1kZXZpY2U9WCAgICAgIHNwZWNpZnkgYW4gZXh0
cmEgZGV2aWNlIHRvIGJlIHVzZWQgdG9nZXRoZXJcbiIKLQkgICAgICAiIC0tZXh0cmFjdCAgICAg
ICBjaGVjayBpZiBhbGwgZmlsZXMgYXJlIHdlbGwgZW5jb2RlZFxuIgotCSAgICAgICIgLS1oZWxw
ICAgICAgICAgIGRpc3BsYXkgdGhpcyBoZWxwIGFuZCBleGl0LlxuIiwKKwkgICAgICAiIC0tZXh0
cmFjdFs9WF0gICBjaGVjayBpZiBhbGwgZmlsZXMgYXJlIHdlbGwgZW5jb2RlZCwgb3B0aW9uYWxs
eSBleHRyYWN0IHRvIFhcbiIKKwkgICAgICAiIC0tcHJlc2VydmUgICAgICBwcmVzZXJ2ZSBtb2Rl
LCBvd25lciBhbmQgZ3JvdXAgKC0tZXh0cmFjdD1YIGlzIHJlcXVpcmVkKVxuIgorCSAgICAgICIg
LS1oZWxwICAgICAgICAgIGRpc3BsYXkgdGhpcyBoZWxwIGFuZCBleGl0XG4iLAogCSAgICAgIHN0
ZGVycik7CiB9CiAKQEAgLTczLDggKzgwLDI2IEBACiAJCQlleGl0KDApOwogCQljYXNlIDI6CiAJ
CQlmc2NrY2ZnLmNoZWNrX2RlY29tcCA9IHRydWU7CisJCQlpZiAob3B0YXJnKSB7CisJCQkJZnNj
a2NmZy5leHRyYWN0X2RpciA9IHN0cmR1cChvcHRhcmcpOworCQkJCWlmICghZnNja2NmZy5leHRy
YWN0X2RpcikKKwkJCQkJcmV0dXJuIC1FTk9NRU07CisJCQkJaWYgKCpmc2NrY2ZnLmV4dHJhY3Rf
ZGlyID09ICdcMCcpCisJCQkJCXJldHVybiAtRUlOVkFMOworCisJCQkJZnNja2NmZy5leHRyYWN0
X2Rpcl9sZW4gPSBzdHJsZW4oZnNja2NmZy5leHRyYWN0X2Rpcik7CisJCQkJLyogcmVtb3ZlIHRy
YWlsaW5nIHNsYXNoZXMgKi8KKwkJCQl3aGlsZSAoZnNja2NmZy5leHRyYWN0X2Rpcl9sZW4gPiAw
ICYmCisJCQkJCSAgIGZzY2tjZmcuZXh0cmFjdF9kaXJbZnNja2NmZy5leHRyYWN0X2Rpcl9sZW4g
LSAxXSA9PSAnLycpIHsKKwkJCQkJZnNja2NmZy5leHRyYWN0X2Rpcltmc2NrY2ZnLmV4dHJhY3Rf
ZGlyX2xlbiAtIDFdID0gJ1wwJzsKKwkJCQkJZnNja2NmZy5leHRyYWN0X2Rpcl9sZW4tLTsKKwkJ
CQl9CisJCQl9CiAJCQlicmVhazsKIAkJY2FzZSAzOgorCQkJZnNja2NmZy5wcmVzZXJ2ZSA9IHRy
dWU7CisJCQlicmVhazsKKwkJY2FzZSA0OgogCQkJcmV0ID0gYmxvYl9vcGVuX3JvKG9wdGFyZyk7
CiAJCQlpZiAocmV0KQogCQkJCXJldHVybiByZXQ7CkBAIC04OCw2ICsxMTMsOSBAQAogCWlmIChv
cHRpbmQgPj0gYXJnYykKIAkJcmV0dXJuIC1FSU5WQUw7CiAKKwlpZiAoZnNja2NmZy5wcmVzZXJ2
ZSAmJiAhZnNja2NmZy5leHRyYWN0X2RpcikKKwkJcmV0dXJuIC1FSU5WQUw7CisKIAljZmcuY19p
bWdfcGF0aCA9IHN0cmR1cChhcmd2W29wdGluZCsrXSk7CiAJaWYgKCFjZmcuY19pbWdfcGF0aCkK
IAkJcmV0dXJuIC1FTk9NRU07CkBAIC0yNDEsMTM1ICsyNjksMTE5IEBACiAJcmV0dXJuIHJldDsK
IH0KIAotc3RhdGljIGludCB2ZXJpZnlfdW5jb21wcmVzc2VkX2lub2RlKHN0cnVjdCBlcm9mc19p
bm9kZSAqaW5vZGUpCi17Ci0Jc3RydWN0IGVyb2ZzX21hcF9ibG9ja3MgbWFwID0gewotCQkuaW5k
ZXggPSBVSU5UX01BWCwKLQl9OwotCWludCByZXQ7Ci0JZXJvZnNfb2ZmX3QgcHRyID0gMDsKLQl1
NjQgaV9ibG9ja3MgPSBESVZfUk9VTkRfVVAoaW5vZGUtPmlfc2l6ZSwgRVJPRlNfQkxLU0laKTsK
LQotCXdoaWxlIChwdHIgPCBpbm9kZS0+aV9zaXplKSB7Ci0JCW1hcC5tX2xhID0gcHRyOwotCQly
ZXQgPSBlcm9mc19tYXBfYmxvY2tzKGlub2RlLCAmbWFwLCAwKTsKLQkJaWYgKHJldCkKLQkJCXJl
dHVybiByZXQ7Ci0KLQkJaWYgKG1hcC5tX3BsZW4gIT0gbWFwLm1fbGxlbiB8fCBwdHIgIT0gbWFw
Lm1fbGEpIHsKLQkJCWVyb2ZzX2VycigiYnJva2VuIGRhdGEgY2h1bmsgbGF5b3V0IG1fbGEgJSIg
UFJJdTY0ICIgcHRyICUiIFBSSXU2NCAiIG1fbGxlbiAlIiBQUkl1NjQgIiBtX3BsZW4gJSIgUFJJ
dTY0LAotCQkJCSAgbWFwLm1fbGEsIHB0ciwgbWFwLm1fbGxlbiwgbWFwLm1fcGxlbik7Ci0JCQly
ZXR1cm4gLUVGU0NPUlJVUFRFRDsKLQkJfQotCi0JCWlmICghKG1hcC5tX2ZsYWdzICYgRVJPRlNf
TUFQX01BUFBFRCkgJiYgIW1hcC5tX2xsZW4pIHsKLQkJCS8qIHJlYWNoZWQgRU9GICovCi0JCQlw
dHIgPSBpbm9kZS0+aV9zaXplOwotCQkJY29udGludWU7Ci0JCX0KLQotCQlwdHIgKz0gbWFwLm1f
bGxlbjsKK3N0YXRpYyBpbmxpbmUgaW50IGVyb2ZzX2NoZWNrX2RpcmVudChzdHJ1Y3QgZXJvZnNf
ZGlyZW50ICpkZSwKKwkJc3RydWN0IGVyb2ZzX2RpcmVudCAqbGFzdF9kZSwKKwkJdTMyIG1heHNp
emUsIGNvbnN0IGNoYXIgKmRuYW1lKQoreworCWludCBkbmFtZV9sZW47CisJdW5zaWduZWQgaW50
IG5hbWVvZmYgPSBsZTE2X3RvX2NwdShkZS0+bmFtZW9mZik7CisJZXJvZnNfbmlkX3QgbmlkID0g
bGU2NF90b19jcHUoZGUtPm5pZCk7CisKKwlpZiAobmFtZW9mZiA8IHNpemVvZihzdHJ1Y3QgZXJv
ZnNfZGlyZW50KSB8fAorCQkJbmFtZW9mZiA+PSBQQUdFX1NJWkUpIHsKKwkJZXJvZnNfZXJyKCJp
bnZhbGlkIGRlWzBdLm5hbWVvZmYgJXUgQCBuaWQgJWxsdSIsCisJCQkJbmFtZW9mZiwgbmlkIHwg
MFVMTCk7CisJCXJldHVybiAtRUZTQ09SUlVQVEVEOwogCX0KIAotCWlmIChmc2NrY2ZnLnByaW50
X2NvbXBfcmF0aW8pIHsKLQkJZnNja2NmZy5sb2dpY2FsX2Jsb2NrcyArPSBpX2Jsb2NrczsKLQkJ
ZnNja2NmZy5waHlzaWNhbF9ibG9ja3MgKz0gaV9ibG9ja3M7CisJZG5hbWVfbGVuID0gKGRlICsg
MSA+PSBsYXN0X2RlKSA/IHN0cm5sZW4oZG5hbWUsIG1heHNpemUgLSBuYW1lb2ZmKSA6CisJCQkJ
bGUxNl90b19jcHUoZGVbMV0ubmFtZW9mZikgLSBuYW1lb2ZmOworCS8qIGEgY29ycnVwdGVkIGVu
dHJ5IGlzIGZvdW5kICovCisJaWYgKG5hbWVvZmYgKyBkbmFtZV9sZW4gPiBtYXhzaXplIHx8CisJ
CQlkbmFtZV9sZW4gPiBFUk9GU19OQU1FX0xFTikgeworCQllcm9mc19lcnIoImJvZ3VzIGRpcmVu
dCBAIG5pZCAlbGx1IiwgbmlkIHwgMFVMTCk7CisJCURCR19CVUdPTigxKTsKKwkJcmV0dXJuIC1F
RlNDT1JSVVBURUQ7CiAJfQotCi0JcmV0dXJuIDA7CisJaWYgKGRlLT5maWxlX3R5cGUgPj0gRVJP
RlNfRlRfTUFYKSB7CisJCWVyb2ZzX2VycigiaW52YWxpZCBmaWxlIHR5cGUgJWxsdSIsIG5pZCB8
IDBVTEwpOworCQlyZXR1cm4gLUVGU0NPUlJVUFRFRDsKKwl9CisJcmV0dXJuIGRuYW1lX2xlbjsK
IH0KIAotc3RhdGljIGludCB2ZXJpZnlfY29tcHJlc3NlZF9pbm9kZShzdHJ1Y3QgZXJvZnNfaW5v
ZGUgKmlub2RlKQorc3RhdGljIGludCBlcm9mc19nZXRfcGF0aG5hbWUoZXJvZnNfbmlkX3Qgbmlk
LCBlcm9mc19uaWRfdCBwYXJlbnRfbmlkLAorCQllcm9mc19uaWRfdCB0YXJnZXQsIGNoYXIgKnBh
dGgsIHVuc2lnbmVkIGludCBwb3MpCiB7Ci0Jc3RydWN0IGVyb2ZzX21hcF9ibG9ja3MgbWFwID0g
ewotCQkuaW5kZXggPSBVSU5UX01BWCwKLQl9OwotCXN0cnVjdCBlcm9mc19tYXBfZGV2IG1kZXY7
Ci0JaW50IHJldCA9IDA7Ci0JdTY0IHBjaHVua19sZW4gPSAwOwotCWVyb2ZzX29mZl90IGVuZCA9
IGlub2RlLT5pX3NpemU7Ci0JdW5zaWduZWQgaW50IHJhd19zaXplID0gMCwgYnVmZmVyX3NpemUg
PSAwOwotCWNoYXIgKnJhdyA9IE5VTEwsICpidWZmZXIgPSBOVUxMOwotCi0Jd2hpbGUgKGVuZCA+
IDApIHsKLQkJbWFwLm1fbGEgPSBlbmQgLSAxOwotCi0JCXJldCA9IHpfZXJvZnNfbWFwX2Jsb2Nr
c19pdGVyKGlub2RlLCAmbWFwLCAwKTsKLQkJaWYgKHJldCkKLQkJCWdvdG8gb3V0OwotCi0JCWlm
IChlbmQgPiBtYXAubV9sYSArIG1hcC5tX2xsZW4pIHsKLQkJCWVyb2ZzX2VycigiYnJva2VuIGNv
bXByZXNzZWQgY2h1bmsgbGF5b3V0IG1fbGEgJSIgUFJJdTY0ICIgbV9sbGVuICUiIFBSSXU2NCAi
IGVuZCAlIiBQUkl1NjQsCi0JCQkJICBtYXAubV9sYSwgbWFwLm1fbGxlbiwgZW5kKTsKLQkJCXJl
dCA9IC1FRlNDT1JSVVBURUQ7Ci0JCQlnb3RvIG91dDsKLQkJfQotCi0JCXBjaHVua19sZW4gKz0g
bWFwLm1fcGxlbjsKLQkJZW5kID0gbWFwLm1fbGE7Ci0KLQkJaWYgKCFmc2NrY2ZnLmNoZWNrX2Rl
Y29tcCB8fCAhKG1hcC5tX2ZsYWdzICYgRVJPRlNfTUFQX01BUFBFRCkpCi0JCQljb250aW51ZTsK
KwlpbnQgZXJyOworCWVyb2ZzX29mZl90IG9mZnNldDsKKwljaGFyIGJ1ZltFUk9GU19CTEtTSVpd
OworCXN0cnVjdCBlcm9mc19pbm9kZSBpbm9kZSA9IHsgLm5pZCA9IG5pZCB9OwogCi0JCWlmICht
YXAubV9wbGVuID4gcmF3X3NpemUpIHsKLQkJCXJhd19zaXplID0gbWFwLm1fcGxlbjsKLQkJCXJh
dyA9IHJlYWxsb2MocmF3LCByYXdfc2l6ZSk7Ci0JCQlCVUdfT04oIXJhdyk7Ci0JCX0KKwlwYXRo
W3BvcysrXSA9ICcvJzsKKwlpZiAodGFyZ2V0ID09IHNiaS5yb290X25pZCkKKwkJcmV0dXJuIDA7
CisKKwllcnIgPSBlcm9mc19yZWFkX2lub2RlX2Zyb21fZGlzaygmaW5vZGUpOworCWlmIChlcnIp
IHsKKwkJZXJvZnNfZXJyKCJyZWFkIGlub2RlIGZhaWxlZCBAIG5pZCAlbGx1IiwgbmlkIHwgMFVM
TCk7CisJCXJldHVybiBlcnI7CisJfQogCi0JCWlmIChtYXAubV9sbGVuID4gYnVmZmVyX3NpemUp
IHsKLQkJCWJ1ZmZlcl9zaXplID0gbWFwLm1fbGxlbjsKLQkJCWJ1ZmZlciA9IHJlYWxsb2MoYnVm
ZmVyLCBidWZmZXJfc2l6ZSk7Ci0JCQlCVUdfT04oIWJ1ZmZlcik7Ci0JCX0KKwlvZmZzZXQgPSAw
OworCXdoaWxlIChvZmZzZXQgPCBpbm9kZS5pX3NpemUpIHsKKwkJZXJvZnNfb2ZmX3QgbWF4c2l6
ZSA9IG1pbl90KGVyb2ZzX29mZl90LAorCQkJCQlpbm9kZS5pX3NpemUgLSBvZmZzZXQsIEVST0ZT
X0JMS1NJWik7CisJCXN0cnVjdCBlcm9mc19kaXJlbnQgKmRlID0gKHZvaWQgKilidWY7CisJCXN0
cnVjdCBlcm9mc19kaXJlbnQgKmVuZDsKKwkJdW5zaWduZWQgaW50IG5hbWVvZmY7CiAKLQkJbWRl
diA9IChzdHJ1Y3QgZXJvZnNfbWFwX2RldikgewotCQkJLm1fZGV2aWNlaWQgPSBtYXAubV9kZXZp
Y2VpZCwKLQkJCS5tX3BhID0gbWFwLm1fcGEsCi0JCX07Ci0JCXJldCA9IGVyb2ZzX21hcF9kZXYo
JnNiaSwgJm1kZXYpOwotCQlpZiAocmV0KSB7Ci0JCQllcm9mc19lcnIoImZhaWxlZCB0byBtYXAg
ZGV2aWNlIG9mIG1fcGEgJSIgUFJJdTY0ICIsIG1fZGV2aWNlaWQgJXUgQCBuaWQgJWxsdTogJWQi
LAotCQkJCSAgbWFwLm1fcGEsIG1hcC5tX2RldmljZWlkLCBpbm9kZS0+bmlkIHwgMFVMTCwgcmV0
KTsKLQkJCWdvdG8gb3V0OwotCQl9CisJCWVyciA9IGVyb2ZzX3ByZWFkKCZpbm9kZSwgYnVmLCBt
YXhzaXplLCBvZmZzZXQpOworCQlpZiAoZXJyKQorCQkJcmV0dXJuIGVycjsKIAotCQlyZXQgPSBk
ZXZfcmVhZChtZGV2Lm1fZGV2aWNlaWQsIHJhdywgbWRldi5tX3BhLCBtYXAubV9wbGVuKTsKLQkJ
aWYgKHJldCA8IDApIHsKLQkJCWVyb2ZzX2VycigiZmFpbGVkIHRvIHJlYWQgY29tcHJlc3NlZCBk
YXRhIG9mIG1fcGEgJSIgUFJJdTY0ICIsIG1fcGxlbiAlIiBQUkl1NjQgIiBAIG5pZCAlbGx1OiAl
ZCIsCi0JCQkJICBtZGV2Lm1fcGEsIG1hcC5tX3BsZW4sIGlub2RlLT5uaWQgfCAwVUxMLCByZXQp
OwotCQkJZ290byBvdXQ7Ci0JCX0KLQotCQlyZXQgPSB6X2Vyb2ZzX2RlY29tcHJlc3MoJihzdHJ1
Y3Qgel9lcm9mc19kZWNvbXByZXNzX3JlcSkgewotCQkJCQkuaW4gPSByYXcsCi0JCQkJCS5vdXQg
PSBidWZmZXIsCi0JCQkJCS5kZWNvZGVkc2tpcCA9IDAsCi0JCQkJCS5pbnB1dHNpemUgPSBtYXAu
bV9wbGVuLAotCQkJCQkuZGVjb2RlZGxlbmd0aCA9IG1hcC5tX2xsZW4sCi0JCQkJCS5hbGcgPSBt
YXAubV9hbGdvcml0aG1mb3JtYXQsCi0JCQkJCS5wYXJ0aWFsX2RlY29kaW5nID0gMAotCQkJCQkg
fSk7CisJCW5hbWVvZmYgPSBsZTE2X3RvX2NwdShkZS0+bmFtZW9mZik7CisJCWVuZCA9ICh2b2lk
ICopYnVmICsgbmFtZW9mZjsKKwkJd2hpbGUgKGRlIDwgZW5kKSB7CisJCQljb25zdCBjaGFyICpk
bmFtZTsKKwkJCWludCBsZW47CisKKwkJCW5hbWVvZmYgPSBsZTE2X3RvX2NwdShkZS0+bmFtZW9m
Zik7CisJCQlkbmFtZSA9IChjaGFyICopYnVmICsgbmFtZW9mZjsKKwkJCWxlbiA9IGVyb2ZzX2No
ZWNrX2RpcmVudChkZSwgZW5kLCBtYXhzaXplLCBkbmFtZSk7CisJCQlpZiAobGVuIDwgMCkKKwkJ
CQlyZXR1cm4gbGVuOworCisJCQlpZiAobGU2NF90b19jcHUoZGUtPm5pZCkgPT0gdGFyZ2V0KSB7
CisJCQkJbWVtY3B5KHBhdGggKyBwb3MsIGRuYW1lLCBsZW4pOworCQkJCXBhdGhbcG9zICsgbGVu
XSA9ICdcMCc7CisJCQkJcmV0dXJuIDA7CisJCQl9CiAKLQkJaWYgKHJldCA8IDApIHsKLQkJCWVy
b2ZzX2VycigiZmFpbGVkIHRvIGRlY29tcHJlc3MgZGF0YSBvZiBtX3BhICUiIFBSSXU2NCAiLCBt
X3BsZW4gJSIgUFJJdTY0ICIgQCBuaWQgJWxsdTogJWQiLAotCQkJCSAgbWRldi5tX3BhLCBtYXAu
bV9wbGVuLCBpbm9kZS0+bmlkIHwgMFVMTCwgcmV0KTsKLQkJCWdvdG8gb3V0OworCQkJaWYgKGRl
LT5maWxlX3R5cGUgPT0gRVJPRlNfRlRfRElSICYmCisJCQkgICAgbGU2NF90b19jcHUoZGUtPm5p
ZCkgIT0gcGFyZW50X25pZCAmJgorCQkJICAgIGxlNjRfdG9fY3B1KGRlLT5uaWQpICE9IG5pZCkg
eworCQkJCW1lbWNweShwYXRoICsgcG9zLCBkbmFtZSwgbGVuKTsKKwkJCQllcnIgPSBlcm9mc19n
ZXRfcGF0aG5hbWUobGU2NF90b19jcHUoZGUtPm5pZCksCisJCQkJCQluaWQsIHRhcmdldCwgcGF0
aCwgcG9zICsgbGVuKTsKKwkJCQlpZiAoIWVycikKKwkJCQkJcmV0dXJuIDA7CisJCQkJbWVtc2V0
KHBhdGggKyBwb3MsIDAsIGxlbik7CisJCQl9CisJCQkrK2RlOwogCQl9CisJCW9mZnNldCArPSBt
YXhzaXplOwogCX0KKwlyZXR1cm4gLTE7Cit9CiAKLQlpZiAoZnNja2NmZy5wcmludF9jb21wX3Jh
dGlvKSB7Ci0JCWZzY2tjZmcubG9naWNhbF9ibG9ja3MgKz0KLQkJCURJVl9ST1VORF9VUChpbm9k
ZS0+aV9zaXplLCBFUk9GU19CTEtTSVopOwotCQlmc2NrY2ZnLnBoeXNpY2FsX2Jsb2NrcyArPQot
CQkJRElWX1JPVU5EX1VQKHBjaHVua19sZW4sIEVST0ZTX0JMS1NJWik7Ci0JfQotb3V0OgotCWlm
IChyYXcpCi0JCWZyZWUocmF3KTsKLQlpZiAoYnVmZmVyKQotCQlmcmVlKGJ1ZmZlcik7Ci0JcmV0
dXJuIHJldCA8IDAgPyByZXQgOiAwOworc3RhdGljIHZvaWQgZXJvZnNfcmVzdG9yZV9zdGF0KHN0
cnVjdCBlcm9mc19pbm9kZSAqaW5vZGUsIGNoYXIgKnBhdGgpCit7CisJaW50IHJldDsKKwlzdHJ1
Y3QgdXRpbWJ1ZiB1dDsKKworCXJldCA9IGNobW9kKHBhdGgsIGlub2RlLT5pX21vZGUpOworCWlm
IChyZXQgPCAwKQorCQllcm9mc193YXJuKCJmYWlsZWQgdG8gc2V0IHBlcm1pc3Npb25zOiAlcyIs
IHBhdGgpOworCisJcmV0ID0gY2hvd24ocGF0aCwgaW5vZGUtPmlfdWlkLCBpbm9kZS0+aV9naWQp
OworCWlmIChyZXQgPCAwKQorCQllcm9mc193YXJuKCJmYWlsZWQgdG8gY2hhbmdlIG93bmVyc2hp
cDogJXMiLCBwYXRoKTsKKworCXV0LmFjdGltZSA9IGlub2RlLT5pX2N0aW1lOworCXV0Lm1vZHRp
bWUgPSBpbm9kZS0+aV9jdGltZTsKKwlpZiAodXRpbWUocGF0aCwgJnV0KSA8IDApCisJCWVyb2Zz
X3dhcm4oImZhaWxlZCB0byBzZXQgdGltZXM6ICVzIiwgcGF0aCk7CiB9CiAKIHN0YXRpYyBpbnQg
ZXJvZnNfdmVyaWZ5X3hhdHRyKHN0cnVjdCBlcm9mc19pbm9kZSAqaW5vZGUpCkBAIC00NTAsOSAr
NDYyLDE4IEBACiAJcmV0dXJuIHJldDsKIH0KIAotc3RhdGljIGludCBlcm9mc192ZXJpZnlfaW5v
ZGVfZGF0YShzdHJ1Y3QgZXJvZnNfaW5vZGUgKmlub2RlKQorc3RhdGljIGludCBlcm9mc192ZXJp
ZnlfaW5vZGVfZGF0YShzdHJ1Y3QgZXJvZnNfaW5vZGUgKmlub2RlLCBpbnQgZmQpCiB7Ci0JaW50
IHJldDsKKwlzdHJ1Y3QgZXJvZnNfbWFwX2Jsb2NrcyBtYXAgPSB7CisJCS5pbmRleCA9IFVJTlRf
TUFYLAorCX07CisJc3RydWN0IGVyb2ZzX21hcF9kZXYgbWRldjsKKwlpbnQgcmV0ID0gMDsKKwli
b29sIGNvbXByZXNzZWQ7CisJZXJvZnNfb2ZmX3QgcHRyID0gMDsKKwl1NjQgcGNodW5rX2xlbiA9
IDA7CisJdW5zaWduZWQgaW50IHJhd19zaXplID0gMCwgYnVmZmVyX3NpemUgPSAwOworCWNoYXIg
KnJhdyA9IE5VTEwsICpidWZmZXIgPSBOVUxMOwogCiAJZXJvZnNfZGJnKCJ2ZXJpZnkgZGF0YSBj
aHVuayBvZiBuaWQoJWxsdSk6IHR5cGUoJWQpIiwKIAkJICBpbm9kZS0+bmlkIHwgMFVMTCwgaW5v
ZGUtPmRhdGFsYXlvdXQpOwpAQCAtNDYxLDY1ICs0ODIsMTY4IEBACiAJY2FzZSBFUk9GU19JTk9E
RV9GTEFUX1BMQUlOOgogCWNhc2UgRVJPRlNfSU5PREVfRkxBVF9JTkxJTkU6CiAJY2FzZSBFUk9G
U19JTk9ERV9DSFVOS19CQVNFRDoKLQkJcmV0ID0gdmVyaWZ5X3VuY29tcHJlc3NlZF9pbm9kZShp
bm9kZSk7CisJCWNvbXByZXNzZWQgPSBmYWxzZTsKIAkJYnJlYWs7CiAJY2FzZSBFUk9GU19JTk9E
RV9GTEFUX0NPTVBSRVNTSU9OX0xFR0FDWToKIAljYXNlIEVST0ZTX0lOT0RFX0ZMQVRfQ09NUFJF
U1NJT046Ci0JCXJldCA9IHZlcmlmeV9jb21wcmVzc2VkX2lub2RlKGlub2RlKTsKKwkJY29tcHJl
c3NlZCA9IHRydWU7CiAJCWJyZWFrOwogCWRlZmF1bHQ6Ci0JCXJldCA9IC1FSU5WQUw7Ci0JCWJy
ZWFrOworCQllcm9mc19lcnIoInVua25vd24gZGF0YWxheW91dCIpOworCQlyZXR1cm4gLUVJTlZB
TDsKIAl9CiAKKwl3aGlsZSAocHRyIDwgaW5vZGUtPmlfc2l6ZSkgeworCQltYXAubV9sYSA9IHB0
cjsKKwkJaWYgKGNvbXByZXNzZWQpCisJCQlyZXQgPSB6X2Vyb2ZzX21hcF9ibG9ja3NfaXRlcihp
bm9kZSwgJm1hcCwgRVJPRlNfR0VUX0JMT0NLU19GSUVNQVApOworCQllbHNlCisJCQlyZXQgPSBl
cm9mc19tYXBfYmxvY2tzKGlub2RlLCAmbWFwLCBFUk9GU19HRVRfQkxPQ0tTX0ZJRU1BUCk7CisJ
CWlmIChyZXQpCisJCQlnb3RvIG91dDsKKworCQlpZiAoY29tcHJlc3NlZCkgeworCQkJaWYgKHB0
ciAhPSBtYXAubV9sYSB8fCBtYXAubV9sYSArIG1hcC5tX2xsZW4gPiBpbm9kZS0+aV9zaXplKSB7
CisJCQkJZXJvZnNfZXJyKCJicm9rZW4gY29tcHJlc3NlZCBjaHVuayBsYXlvdXQgcHRyICUiIFBS
SXU2NCAiIG1fbGEgJSIgUFJJdTY0ICIgbV9sbGVuICUiIFBSSXU2NCAiIGlfc2l6ZSAlIiBQUkl1
NjQsCisJCQkJCSAgcHRyLCBtYXAubV9sYSwgbWFwLm1fbGxlbiwgaW5vZGUtPmlfc2l6ZSk7CisJ
CQkJcmV0ID0gLUVGU0NPUlJVUFRFRDsKKwkJCQlnb3RvIG91dDsKKwkJCX0KKwkJfSBlbHNlIHsK
KwkJCWlmIChwdHIgIT0gbWFwLm1fbGEgfHwgbWFwLm1fbGxlbiAhPSBtYXAubV9wbGVuKSB7CisJ
CQkJZXJvZnNfZXJyKCJicm9rZW4gZGF0YSBjaHVuayBsYXlvdXQgcHRyICUiIFBSSXU2NCAiIG1f
bGEgJSIgUFJJdTY0ICIgbV9sbGVuICUiIFBSSXU2NCAiIG1fcGxlbiAlIiBQUkl1NjQsCisJCQkJ
CSAgcHRyLCBtYXAubV9sYSwgbWFwLm1fbGxlbiwgbWFwLm1fcGxlbik7CisJCQkJcmV0ID0gLUVG
U0NPUlJVUFRFRDsKKwkJCQlnb3RvIG91dDsKKwkJCX0KKworCQkJaWYgKG1hcC5tX2xhICsgbWFw
Lm1fbGxlbiA+IGlub2RlLT5pX3NpemUpCisJCQkJbWFwLm1fbGxlbiA9IGlub2RlLT5pX3NpemUg
LSBtYXAubV9sYTsKKwkJfQorCisJCXBjaHVua19sZW4gKz0gbWFwLm1fcGxlbjsKKwkJcHRyICs9
IG1hcC5tX2xsZW47CisKKwkJLyogcmVhY2hlZCBFT0Y/ICovCisJCWlmICghKG1hcC5tX2ZsYWdz
ICYgRVJPRlNfTUFQX01BUFBFRCkgJiYgIW1hcC5tX2xsZW4pCisJCQlicmVhazsKKworCQkvKiBz
aG91bGQgc2tpcCBkZWNvbXA/ICovCisJCWlmICghZnNja2NmZy5jaGVja19kZWNvbXApCisJCQlj
b250aW51ZTsKKworCQlpZiAobWFwLm1fcGxlbiA+IHJhd19zaXplKSB7CisJCQlyYXdfc2l6ZSA9
IG1hcC5tX3BsZW47CisJCQlyYXcgPSByZWFsbG9jKHJhdywgcmF3X3NpemUpOworCQkJQlVHX09O
KCFyYXcpOworCQl9CisKKwkJaWYgKGNvbXByZXNzZWQgJiYgbWFwLm1fbGxlbiA+IGJ1ZmZlcl9z
aXplKSB7CisJCQlidWZmZXJfc2l6ZSA9IG1hcC5tX2xsZW47CisJCQlidWZmZXIgPSByZWFsbG9j
KGJ1ZmZlciwgYnVmZmVyX3NpemUpOworCQkJQlVHX09OKCFidWZmZXIpOworCQl9CisKKwkJbWRl
diA9IChzdHJ1Y3QgZXJvZnNfbWFwX2RldikgeworCQkJLm1fZGV2aWNlaWQgPSBtYXAubV9kZXZp
Y2VpZCwKKwkJCS5tX3BhID0gbWFwLm1fcGEsCisJCX07CisJCXJldCA9IGVyb2ZzX21hcF9kZXYo
JnNiaSwgJm1kZXYpOworCQlpZiAocmV0KSB7CisJCQllcm9mc19lcnIoImZhaWxlZCB0byBtYXAg
ZGV2aWNlIG9mIG1fcGEgJSIgUFJJdTY0ICIsIG1fZGV2aWNlaWQgJXUgQCBuaWQgJWxsdTogJWQi
LAorCQkJCSAgbWFwLm1fcGEsIG1hcC5tX2RldmljZWlkLCBpbm9kZS0+bmlkIHwgMFVMTCwgcmV0
KTsKKwkJCWdvdG8gb3V0OworCQl9CisKKwkJcmV0ID0gZGV2X3JlYWQobWRldi5tX2RldmljZWlk
LCByYXcsIG1kZXYubV9wYSwgbWFwLm1fcGxlbik7CisJCWlmIChyZXQgPCAwKSB7CisJCQllcm9m
c19lcnIoImZhaWxlZCB0byByZWFkIGRhdGEgb2YgbV9wYSAlIiBQUkl1NjQgIiwgbV9wbGVuICUi
IFBSSXU2NCAiIEAgbmlkICVsbHU6ICVkIiwKKwkJCQkgIG1kZXYubV9wYSwgbWFwLm1fcGxlbiwg
aW5vZGUtPm5pZCB8IDBVTEwsIHJldCk7CisJCQlnb3RvIG91dDsKKwkJfQorCisJCWlmIChjb21w
cmVzc2VkKSB7CisJCQlyZXQgPSB6X2Vyb2ZzX2RlY29tcHJlc3MoJihzdHJ1Y3Qgel9lcm9mc19k
ZWNvbXByZXNzX3JlcSkgeworCQkJCQkJLmluID0gcmF3LAorCQkJCQkJLm91dCA9IGJ1ZmZlciwK
KwkJCQkJCS5kZWNvZGVkc2tpcCA9IDAsCisJCQkJCQkuaW5wdXRzaXplID0gbWFwLm1fcGxlbiwK
KwkJCQkJCS5kZWNvZGVkbGVuZ3RoID0gbWFwLm1fbGxlbiwKKwkJCQkJCS5hbGcgPSBtYXAubV9h
bGdvcml0aG1mb3JtYXQsCisJCQkJCQkucGFydGlhbF9kZWNvZGluZyA9IDAKKwkJCQkJCSB9KTsK
KworCQkJaWYgKHJldCA8IDApIHsKKwkJCQllcm9mc19lcnIoImZhaWxlZCB0byBkZWNvbXByZXNz
IGRhdGEgb2YgbV9wYSAlIiBQUkl1NjQgIiwgbV9wbGVuICUiIFBSSXU2NCAiIEAgbmlkICVsbHU6
ICVkIiwKKwkJCQkJICBtZGV2Lm1fcGEsIG1hcC5tX3BsZW4sIGlub2RlLT5uaWQgfCAwVUxMLCBy
ZXQpOworCQkJCWdvdG8gb3V0OworCQkJfQorCQl9CisKKwkJaWYgKGZkICE9IC0xICYmIHdyaXRl
KGZkLCBjb21wcmVzc2VkID8gYnVmZmVyIDogcmF3LCBtYXAubV9sbGVuKSA8IDApIHsKKwkJCXJl
dCA9IC1FSU87CisJCQlnb3RvIG91dDsKKwkJfQorCX0KKworCWlmIChmc2NrY2ZnLnByaW50X2Nv
bXBfcmF0aW8pIHsKKwkJZnNja2NmZy5sb2dpY2FsX2Jsb2NrcyArPQorCQkJRElWX1JPVU5EX1VQ
KGlub2RlLT5pX3NpemUsIEVST0ZTX0JMS1NJWik7CisJCWZzY2tjZmcucGh5c2ljYWxfYmxvY2tz
ICs9CisJCQlESVZfUk9VTkRfVVAocGNodW5rX2xlbiwgRVJPRlNfQkxLU0laKTsKKwl9CitvdXQ6
CisJaWYgKHJhdykKKwkJZnJlZShyYXcpOworCWlmIChidWZmZXIpCisJCWZyZWUoYnVmZmVyKTsK
IAlpZiAocmV0ID09IC1FSU8pCiAJCWVyb2ZzX2VycigiSS9PIGVycm9yIG9jY3VycmVkIHdoZW4g
dmVyaWZ5aW5nIGRhdGEgY2h1bmsgb2YgbmlkKCVsbHUpIiwKIAkJCSAgaW5vZGUtPm5pZCB8IDBV
TEwpOwotCi0JcmV0dXJuIHJldDsKKwlyZXR1cm4gcmV0IDwgMCA/IHJldCA6IDA7CiB9CiAKLXN0
YXRpYyB2b2lkIGVyb2ZzX2NoZWNrX2lub2RlKGVyb2ZzX25pZF90IHBuaWQsIGVyb2ZzX25pZF90
IG5pZCkKK3N0YXRpYyBpbnQgZXJvZnNfdmVyaWZ5X2Rpcihlcm9mc19uaWRfdCBwbmlkLCBlcm9m
c19uaWRfdCBuaWQsIHN0cnVjdCBlcm9mc19pbm9kZSAqaW5vZGUsIGNoYXIgKnBhdGgpCiB7CiAJ
aW50IHJldDsKLQlzdHJ1Y3QgZXJvZnNfaW5vZGUgaW5vZGU7CiAJY2hhciBidWZbRVJPRlNfQkxL
U0laXTsKLQllcm9mc19vZmZfdCBvZmZzZXQ7Ci0KLQllcm9mc19kYmcoImNoZWNrIGlub2RlOiBu
aWQoJWxsdSkiLCBuaWQgfCAwVUxMKTsKLQotCWlub2RlLm5pZCA9IG5pZDsKLQlyZXQgPSBlcm9m
c19yZWFkX2lub2RlX2Zyb21fZGlzaygmaW5vZGUpOwotCWlmIChyZXQpIHsKLQkJaWYgKHJldCA9
PSAtRUlPKQotCQkJZXJvZnNfZXJyKCJJL08gZXJyb3Igb2NjdXJyZWQgd2hlbiByZWFkaW5nIG5p
ZCglbGx1KSIsCi0JCQkJICBuaWQgfCAwVUxMKTsKLQkJZ290byBvdXQ7Ci0JfQotCi0JLyogdmVy
aWZ5IHhhdHRyIGZpZWxkICovCi0JcmV0ID0gZXJvZnNfdmVyaWZ5X3hhdHRyKCZpbm9kZSk7Ci0J
aWYgKHJldCkKLQkJZ290byBvdXQ7CisJZXJvZnNfb2ZmX3Qgb2Zmc2V0ID0gMDsKIAogCS8qIHZl
cmlmeSBkYXRhIGNodW5rIGxheW91dCAqLwotCXJldCA9IGVyb2ZzX3ZlcmlmeV9pbm9kZV9kYXRh
KCZpbm9kZSk7CisJcmV0ID0gZXJvZnNfdmVyaWZ5X2lub2RlX2RhdGEoaW5vZGUsIC0xKTsKIAlp
ZiAocmV0KQogCQlnb3RvIG91dDsKIAotCWlmICgoaW5vZGUuaV9tb2RlICYgU19JRk1UKSAhPSBT
X0lGRElSKQotCQlnb3RvIG91dDsKKwlpZiAocGF0aCkgeworCQlzdHJ1Y3Qgc3RhdCBzYjsKIAot
CW9mZnNldCA9IDA7Ci0Jd2hpbGUgKG9mZnNldCA8IGlub2RlLmlfc2l6ZSkgeworCQllcm9mc19k
YmcoImNyZWF0ZSBkaXJlY3Rvcnkgb24gcGF0aDogJXMiLCBwYXRoKTsKKworCQlpZiAoIWxzdGF0
KHBhdGgsICZzYikpIHsKKwkJCWlmICghU19JU0RJUihzYi5zdF9tb2RlKSkgeworCQkJCWVyb2Zz
X2VycigicGF0aCBpcyBub3QgYSBkaXJlY3Rvcnk6ICVzIiwgcGF0aCk7CisJCQkJcmV0ID0gLUVJ
TzsKKwkJCQlnb3RvIG91dDsKKwkJCX0KKwkJfSBlbHNlIGlmIChlcnJubyAhPSBFTk9FTlQgfHwg
bWtkaXIocGF0aCwgU19JUldYVSkgPCAwKSB7CisJCQllcm9mc19lcnIoImZhaWxlZCB0byBjcmVh
dGUgZGlyZWN0b3J5OiAlcyIsIHBhdGgpOworCQkJcmV0ID0gLUVJTzsKKwkJCWdvdG8gb3V0Owor
CQl9CisKKwkJaWYgKGZzY2tjZmcucHJlc2VydmUpCisJCQllcm9mc19yZXN0b3JlX3N0YXQoaW5v
ZGUsIHBhdGgpOworCX0KKworCXdoaWxlIChvZmZzZXQgPCBpbm9kZS0+aV9zaXplKSB7CiAJCWVy
b2ZzX2Jsa190IGJsb2NrID0gZXJvZnNfYmxrbnIob2Zmc2V0KTsKIAkJZXJvZnNfb2ZmX3QgbWF4
c2l6ZSA9IG1pbl90KGVyb2ZzX29mZl90LAotCQkJCQlpbm9kZS5pX3NpemUgLSBvZmZzZXQsIEVS
T0ZTX0JMS1NJWik7CisJCQkJCWlub2RlLT5pX3NpemUgLSBvZmZzZXQsIEVST0ZTX0JMS1NJWik7
CiAJCXN0cnVjdCBlcm9mc19kaXJlbnQgKmRlID0gKHZvaWQgKilidWY7CiAKIAkJdW5zaWduZWQg
aW50IG5hbWVvZmY7CiAKLQkJcmV0ID0gZXJvZnNfcHJlYWQoJmlub2RlLCBidWYsIG1heHNpemUs
IG9mZnNldCk7CisJCXJldCA9IGVyb2ZzX3ByZWFkKGlub2RlLCBidWYsIG1heHNpemUsIG9mZnNl
dCk7CiAJCWlmIChyZXQpIHsKIAkJCWVyb2ZzX2VycigiSS9PIGVycm9yIG9jY3VycmVkIHdoZW4g
cmVhZGluZyBkaXJlbnRzIEAgbmlkICVsbHUsIGJsb2NrICV1OiAlZCIsCiAJCQkJICBuaWQgfCAw
VUxMLCBibG9jaywgcmV0KTsKQEAgLTU0Myw2ICs2NjcsMTgyIEBACiAJCW9mZnNldCArPSBtYXhz
aXplOwogCX0KIG91dDoKKwlyZXR1cm4gcmV0OworfQorCitzdGF0aWMgaW50IGVyb2ZzX3Zlcmlm
eV9maWxlKGVyb2ZzX25pZF90IG5pZCwgc3RydWN0IGVyb2ZzX2lub2RlICppbm9kZSwgY2hhciAq
cGF0aCkKK3sKKwlpbnQgcmV0OworCWludCBmZCA9IC0xOworCisJaWYgKHBhdGgpIHsKKwkJc3Ry
dWN0IHN0YXQgc2I7CisKKwkJZXJvZnNfZGJnKCJleHRyYWN0IGZpbGUgdG8gcGF0aDogJXMiLCBw
YXRoKTsKKworCQlpZiAoIWxzdGF0KHBhdGgsICZzYikpIHsKKwkJCWlmIChTX0lTRElSKHNiLnN0
X21vZGUpKSB7CisJCQkJZXJvZnNfZXJyKCJwYXRoIGlzIGEgZGlyZWN0b3J5OiAlcyIsIHBhdGgp
OworCQkJCXJldCA9IC1FSU87CisJCQkJZ290byBvdXQ7CisJCQl9CisJCQllcm9mc193YXJuKCJv
dmVyd3JpdGluZzogJXMiLCBwYXRoKTsKKwkJCWlmICh1bmxpbmsocGF0aCkgPCAwKSB7CisJCQkJ
ZXJvZnNfZXJyKCJmYWlsZWQgdG8gcmVtb3ZlIGZpbGU6ICVzIiwgcGF0aCk7CisJCQkJcmV0ID0g
LUVJTzsKKwkJCQlnb3RvIG91dDsKKwkJCX0KKwkJfQorCisJCWZkID0gb3BlbihwYXRoLCBPX1dS
T05MWSB8IE9fQ1JFQVQgfCBPX1RSVU5DLCBTX0lSV1hVKTsKKwkJaWYgKGZkIDwgMCkgeworCQkJ
ZXJvZnNfZXJyKCJmYWlsZWQgdG8gb3BlbiBmaWxlOiAlcyIsIHBhdGgpOworCQkJcmV0ID0gLUVJ
TzsKKwkJCWdvdG8gb3V0OworCQl9CisJfQorCisJLyogdmVyaWZ5IGRhdGEgY2h1bmsgbGF5b3V0
ICovCisJcmV0ID0gZXJvZnNfdmVyaWZ5X2lub2RlX2RhdGEoaW5vZGUsIGZkKTsKKworCWlmIChw
YXRoKSB7CisJCWludCBmc3luY19mYWlsID0gZnN5bmMoZmQpICE9IDA7CisJCWludCBjbG9zZV9m
YWlsID0gY2xvc2UoZmQpICE9IDA7CisKKwkJaWYgKHJldCkKKwkJCWdvdG8gb3V0OworCQlpZiAo
ZnN5bmNfZmFpbCB8fCBjbG9zZV9mYWlsKSB7CisJCQlyZXQgPSAtRUlPOworCQkJZ290byBvdXQ7
CisJCX0KKworCQlpZiAoZnNja2NmZy5wcmVzZXJ2ZSkKKwkJCWVyb2ZzX3Jlc3RvcmVfc3RhdChp
bm9kZSwgcGF0aCk7CisJfQorb3V0OgorCXJldHVybiByZXQ7Cit9CisKK3N0YXRpYyBpbnQgZXJv
ZnNfdmVyaWZ5X3N5bWxpbmsoZXJvZnNfbmlkX3QgbmlkLCBzdHJ1Y3QgZXJvZnNfaW5vZGUgKmlu
b2RlLCBjaGFyICpwYXRoKQoreworCWludCByZXQ7CisJY2hhciAqYnVmID0gTlVMTDsKKworCS8q
IHZlcmlmeSBkYXRhIGNodW5rIGxheW91dCAqLworCXJldCA9IGVyb2ZzX3ZlcmlmeV9pbm9kZV9k
YXRhKGlub2RlLCAtMSk7CisJaWYgKHJldCkKKwkJZ290byBvdXQ7CisKKwlpZiAocGF0aCkgewor
CQlzdHJ1Y3Qgc3RhdCBzYjsKKworCQllcm9mc19kYmcoImV4dHJhY3Qgc3ltbGluayB0byBwYXRo
OiAlcyIsIHBhdGgpOworCisJCWlmICghbHN0YXQocGF0aCwgJnNiKSkgeworCQkJaWYgKFNfSVNE
SVIoc2Iuc3RfbW9kZSkpIHsKKwkJCQllcm9mc19lcnIoInBhdGggaXMgYSBkaXJlY3Rvcnk6ICVz
IiwgcGF0aCk7CisJCQkJcmV0ID0gLUVJTzsKKwkJCQlnb3RvIG91dDsKKwkJCX0KKwkJCWVyb2Zz
X3dhcm4oIm92ZXJ3cml0aW5nOiAlcyIsIHBhdGgpOworCQkJaWYgKHVubGluayhwYXRoKSA8IDAp
IHsKKwkJCQllcm9mc19lcnIoImZhaWxlZCB0byByZW1vdmUgZmlsZTogJXMiLCBwYXRoKTsKKwkJ
CQlyZXQgPSAtRUlPOworCQkJCWdvdG8gb3V0OworCQkJfQorCQl9CisKKwkJYnVmID0gbWFsbG9j
KGlub2RlLT5pX3NpemUgKyAxKTsKKwkJaWYgKCFidWYpIHsKKwkJCXJldCA9IC1FTk9NRU07CisJ
CQlnb3RvIG91dDsKKwkJfQorCisJCXJldCA9IGVyb2ZzX3ByZWFkKGlub2RlLCBidWYsIGlub2Rl
LT5pX3NpemUsIDApOworCQlpZiAocmV0KSB7CisJCQllcm9mc19lcnIoIkkvTyBlcnJvciBvY2N1
cnJlZCB3aGVuIHJlYWRpbmcgc3ltbGluayBAIG5pZCAlbGx1OiAlZCIsCisJCQkJICBuaWQgfCAw
VUxMLCByZXQpOworCQkJZ290byBvdXQ7CisJCX0KKworCQlidWZbaW5vZGUtPmlfc2l6ZV0gPSAn
XDAnOworCQlpZiAoc3ltbGluayhidWYsIHBhdGgpIDwgMCkgeworCQkJZXJvZnNfZXJyKCJmYWls
ZWQgdG8gY3JlYXRlIHN5bWxpbms6ICVzIiwgcGF0aCk7CisJCQlyZXQgPSAtRUlPOworCQkJZ290
byBvdXQ7CisJCX0KKworCQlpZiAoZnNja2NmZy5wcmVzZXJ2ZSkKKwkJCWVyb2ZzX3Jlc3RvcmVf
c3RhdChpbm9kZSwgcGF0aCk7CisJfQorb3V0OgorCWlmIChidWYpCisJCWZyZWUoYnVmKTsKKwly
ZXR1cm4gcmV0OworfQorCitzdGF0aWMgdm9pZCBlcm9mc19jaGVja19pbm9kZShlcm9mc19uaWRf
dCBwbmlkLCBlcm9mc19uaWRfdCBuaWQpCit7CisJaW50IHJldDsKKwlzdHJ1Y3QgZXJvZnNfaW5v
ZGUgaW5vZGU7CisJY2hhciAqcGF0aCA9IE5VTEw7CisKKwllcm9mc19kYmcoInZlcmlmeSBpbm9k
ZTogbmlkKCVsbHUpIiwgbmlkIHwgMFVMTCk7CisKKwlpbm9kZS5uaWQgPSBuaWQ7CisJcmV0ID0g
ZXJvZnNfcmVhZF9pbm9kZV9mcm9tX2Rpc2soJmlub2RlKTsKKwlpZiAocmV0KSB7CisJCWlmIChy
ZXQgPT0gLUVJTykKKwkJCWVyb2ZzX2VycigiSS9PIGVycm9yIG9jY3VycmVkIHdoZW4gcmVhZGlu
ZyBuaWQoJWxsdSkiLAorCQkJCSAgbmlkIHwgMFVMTCk7CisJCWdvdG8gb3V0OworCX0KKworCS8q
IHZlcmlmeSB4YXR0ciBmaWVsZCAqLworCXJldCA9IGVyb2ZzX3ZlcmlmeV94YXR0cigmaW5vZGUp
OworCWlmIChyZXQpCisJCWdvdG8gb3V0OworCisJaWYgKGZzY2tjZmcuZXh0cmFjdF9kaXIpIHsK
KwkJY2hhciBidWZbUEFUSF9NQVggKyAxXSA9IHswfTsKKwkJaW50IGJ1ZmxlbjsKKworCQlyZXQg
PSBlcm9mc19nZXRfcGF0aG5hbWUoc2JpLnJvb3RfbmlkLCBzYmkucm9vdF9uaWQsCisJCQkJCSBp
bm9kZS5uaWQsIGJ1ZiwgMCk7CisJCWlmIChyZXQgPCAwKSB7CisJCQllcm9mc19lcnIoImZpbGUg
cGF0aCBub3QgZm91bmQgQCBuaWQgJWxsdSIsIGlub2RlLm5pZCB8IDBVTEwpOworCQkJZ290byBv
dXQ7CisJCX0KKworCQlwYXRoID0gbWFsbG9jKFBBVEhfTUFYICsgMSk7CisJCWlmICghcGF0aCkg
eworCQkJcmV0ID0gLUVOT01FTTsKKwkJCWdvdG8gb3V0OworCQl9CisJCWJ1ZmxlbiA9IHN0cmxl
bihidWYpOworCQltZW1jcHkocGF0aCwgZnNja2NmZy5leHRyYWN0X2RpciwgZnNja2NmZy5leHRy
YWN0X2Rpcl9sZW4pOworCQltZW1jcHkocGF0aCArIGZzY2tjZmcuZXh0cmFjdF9kaXJfbGVuLCBi
dWYsIGJ1Zmxlbik7CisJCXBhdGhbZnNja2NmZy5leHRyYWN0X2Rpcl9sZW4gKyBidWZsZW5dID0g
J1wwJzsKKwl9CisKKwkvKiB2ZXJpZnkgZGF0YSBjaHVuayBsYXlvdXQgKi8KKwlzd2l0Y2ggKGlu
b2RlLmlfbW9kZSAmIFNfSUZNVCkgeworCWNhc2UgU19JRlJFRzoKKwkJcmV0ID0gZXJvZnNfdmVy
aWZ5X2ZpbGUobmlkLCAmaW5vZGUsIHBhdGgpOworCQlicmVhazsKKwljYXNlIFNfSUZESVI6CisJ
CXJldCA9IGVyb2ZzX3ZlcmlmeV9kaXIocG5pZCwgbmlkLCAmaW5vZGUsIHBhdGgpOworCQlicmVh
azsKKwljYXNlIFNfSUZMTks6CisJCXJldCA9IGVyb2ZzX3ZlcmlmeV9zeW1saW5rKG5pZCwgJmlu
b2RlLCBwYXRoKTsKKwkJYnJlYWs7CisJZGVmYXVsdDoKKwkJcmV0ID0gZXJvZnNfdmVyaWZ5X2lu
b2RlX2RhdGEoJmlub2RlLCAtMSk7CisJCWJyZWFrOworCX0KK291dDoKKwlpZiAocGF0aCkKKwkJ
ZnJlZShwYXRoKTsKIAlpZiAocmV0ICYmIHJldCAhPSAtRUlPKQogCQlmc2NrY2ZnLmNvcnJ1cHRl
ZCA9IHRydWU7CiB9CkBAIC01NTYsNiArODU2LDkgQEAKIAlmc2NrY2ZnLmNvcnJ1cHRlZCA9IGZh
bHNlOwogCWZzY2tjZmcucHJpbnRfY29tcF9yYXRpbyA9IGZhbHNlOwogCWZzY2tjZmcuY2hlY2tf
ZGVjb21wID0gZmFsc2U7CisJZnNja2NmZy5leHRyYWN0X2RpciA9IE5VTEw7CisJZnNja2NmZy5l
eHRyYWN0X2Rpcl9sZW4gPSAwOworCWZzY2tjZmcucHJlc2VydmUgPSBmYWxzZTsKIAlmc2NrY2Zn
LmxvZ2ljYWxfYmxvY2tzID0gMDsKIAlmc2NrY2ZnLnBoeXNpY2FsX2Jsb2NrcyA9IDA7CiAK
--0000000000009a22ec05d2c01507--
